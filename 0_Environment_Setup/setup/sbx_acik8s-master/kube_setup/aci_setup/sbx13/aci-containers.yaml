apiVersion: v1
kind: ConfigMap
metadata:
  name: aci-containers-config
  namespace: kube-system
  labels:
    aci-containers-config-version: "6200710d-bb6e-4b46-89ac-0f5d87a1e893"
    network-plugin: aci-containers
data:
  controller-config: |-
    {
        "log-level": "info",
        "apic-hosts": [
            "10.10.20.12"
        ],
        "apic-username": "kubesbx13",
        "apic-private-key-path": "/usr/local/etc/aci-cert/user.key",
        "aci-prefix": "kubesbx13",
        "aci-vmm-type": "Kubernetes",
        "aci-vmm-domain": "kubesbx13",
        "aci-vmm-controller": "kubesbx13",
        "aci-policy-tenant": "kubesbx13",
        "require-netpol-annot": false,
        "aci-service-phys-dom": "kubesbx13-pdom",
        "aci-service-encap": "vlan-929",
        "aci-service-monitor-interval": 15,
        "aci-vrf-tenant": "common",
        "aci-l3out": "sbx_shared_L3Out",
        "aci-ext-networks": [
            "any_ip"
        ],
        "aci-vrf": "sbx_shared",
        "default-endpoint-group": {
            "policy-space": "kubesbx13",
            "name": "kubernetes|kube-default"
        },
        "namespace-default-endpoint-group": {
            "kube-system": {
                "policy-space": "kubesbx13",
                "name": "kubernetes|kube-system"
            }
        },
        "service-ip-pool": [
            {
                "start": "172.20.13.194", 
                "end": "172.20.13.222"
            }
        ],
        "static-service-ip-pool": [
            {
                "start": "172.20.13.226", 
                "end": "172.20.13.254"
            }
        ],
        "pod-ip-pool": [
            {
                "start": "10.213.0.2", 
                "end": "10.213.255.254"
            }
        ],
        "node-service-ip-pool": [
            {
                "start": "192.168.113.2", 
                "end": "192.168.113.254"
            }
        ],
        "node-service-subnets": [
            "192.168.113.1/24"
        ]
    }
  host-agent-config: |-
    {
        "log-level": "info",
        "aci-vmm-type": "Kubernetes",
        "aci-vmm-domain": "kubesbx13",
        "aci-vmm-controller": "kubesbx13",
        "aci-vrf": "sbx_shared",
        "aci-vrf-tenant": "common",
        "service-vlan": 929,
        "encap-type": "vxlan",
        "aci-infra-vlan": 4093,
        "cni-netconfig": [
            {
                "routes": [
                    {
                        "gw": "10.213.0.1", 
                        "dst": "0.0.0.0/0"
                    }
                ], 
                "subnet": "10.213.0.0/16", 
                "gateway": "10.213.0.1"
            }
        ]
    }
  opflex-agent-config: |-
    {
        "log": {
            "level": "info"
        },
        "opflex": {
        }
    }
---
apiVersion: v1
kind: Secret
metadata:
  name: aci-user-cert
  namespace: kube-system
  labels:
    aci-containers-config-version: "6200710d-bb6e-4b46-89ac-0f5d87a1e893"
data:
  user.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUNkd0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQW1Fd2dnSmRBZ0VBQW9HQkFMREptZU03dWNyaEdDaE8KSWVTV0FWbjdiT2xZWEJKWHFZN0xaT28vb0QwUDRuTG1ZZDBsdkw3bXFqbEpyMW1mcUV1bE9rVG8rRzFQZ0NxMwpFcEdzRTM3RGtURHdxQTVhd2ppR01mUWpDeG5kNjRUT3FJb0tLN3N1VG9ZaW5vVi9FZmd4YzFFc3MxWHVXSVVKCit2TE5ZOFZZK3JpdGpWdVlsbkgvb1VqNE1iY0ZBZ01CQUFFQ2dZQmNZeTdac3BlNHI0T1paS09QdXRpLzlvWUgKT0JiOXV2UXdYSmpEVmpiZVVsUE1LaHVRbjYwUXNxall3V295MHgzM1VrU3VTSFd6WW0yZlpRYitPOGYvZ3pSbgoyODZneGtiZitHcEovdEZpMDNnWUZnOWQyT2NoaVFtaUtQOUtBNko2RGdidTN5TTR1VkR2WWZTeTcveHEreVR4CmZuVnR6bzhoRUJWRGtmKzRBUUpCQU9TZXVRVXRQdWt0RVVYazd5c1hNQ3haZzVsUlZXb2VibElNcDJHNUtjVHMKcU1ZbGdDR1lsL1R2T3dMNE56TmRwb283RmY2b2lYQytjTFRWVk9xK1BnRUNRUURGOWIzckphODJyMUgvSkdnTgpVQUxOV01ndTFaU2M1OEJ1dHZsdEJ0b3JVdE5wSFMzOWlZaGVqNkx3ZlNkZHlHck1ZeHYyMUtUTXB6eFRWbm45ClBJRUZBa0VBaGQ4THFLUmQrbHlSaU1RTjZNV2pSOVVDNG54bDc4WHlBOG0xR2R3N1FUenpkMVB1Tzc0Ry9UNDQKNS94QkZxcjRJbW1HNzUveEd6dm84M3NZUm4wd0FRSkFkbEQwSEJFLzhjMURrdDB0bTVkUXRXNzA1cGtjNDlMWAovdFE1cStKR2oxSkhyVEdWaFUyb1JleFBsTEVZMEVLeklrbXlNd3JSSE1odms5ZkJ2WXRtQ1FKQkFJeFJyMFcrCnQ1azhXcUNyaVRFbkhFR1N5MDd6UUdKY2JSMGlnaGF0WU81ZEQrSWF4TkJQS2VmaHQ2aXlxU0FJc1Qya083azYKTldHb0gxNW5aSFc1Ry9JPQotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCg==
  user.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI3RENDQVZVQ0FnUG9NQTBHQ1NxR1NJYjNEUUVCQlFVQU1ENHhDekFKQmdOVkJBWVRBbFZUTVJZd0ZBWUQKVlFRS0RBMURhWE5qYnlCVGVYTjBaVzF6TVJjd0ZRWURWUVFEREE1VmMyVnlJR3QxWW1WelluZ3hNekFlRncweApPREE0TURrd05UVXlORE5hRncweU9EQTRNRFl4TnpVeU5ETmFNRDR4Q3pBSkJnTlZCQVlUQWxWVE1SWXdGQVlEClZRUUtEQTFEYVhOamJ5QlRlWE4wWlcxek1SY3dGUVlEVlFRRERBNVZjMlZ5SUd0MVltVnpZbmd4TXpDQm56QU4KQmdrcWhraUc5dzBCQVFFRkFBT0JqUUF3Z1lrQ2dZRUFzTW1aNHp1NXl1RVlLRTRoNUpZQldmdHM2VmhjRWxlcApqc3RrNmorZ1BRL2ljdVpoM1NXOHZ1YXFPVW12V1orb1M2VTZST2o0YlUrQUtyY1NrYXdUZnNPUk1QQ29EbHJDCk9JWXg5Q01MR2QzcmhNNm9pZ29ydXk1T2hpS2VoWDhSK0RGelVTeXpWZTVZaFFuNjhzMWp4Vmo2dUsyTlc1aVcKY2YraFNQZ3h0d1VDQXdFQUFUQU5CZ2txaGtpRzl3MEJBUVVGQUFPQmdRQ1dUQjJZNDl6WFl5eVEyckd0aEZsaQo5Q2FmdHhmaC9xSWF5ekVJVkdvQTdtQ3ByYlN1alF2bUU4dk5NUFoyQWxkTm5yYUJ1Tllva3RzWWx1VjVndDNiCjNPcVlSUGxwb2xYalB3NnJWREp6U0IvcjJ1cmQ2Yng5ekdlMWlHdVdZUVh2emExa1BVRERnLzE4VHdjcDNnSE4KV2lTWVFQYXpLTXViTnMwbEFvMkw4UT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aci-containers-controller
  namespace: kube-system
  labels:
    aci-containers-config-version: "6200710d-bb6e-4b46-89ac-0f5d87a1e893"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aci-containers-host-agent
  namespace: kube-system
  labels:
    aci-containers-config-version: "6200710d-bb6e-4b46-89ac-0f5d87a1e893"
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    aci-containers-config-version: "6200710d-bb6e-4b46-89ac-0f5d87a1e893"
    network-plugin: aci-containers
  name: aci-containers:controller
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - namespaces
  - pods
  - endpoints
  - services
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - "networking.k8s.io"
  resources:
  - networkpolicies
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - "extensions"
  resources:
  - deployments
  - replicasets
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - ""
  resources:
  - pods
  - nodes
  - services/status
  verbs:
  - update
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    aci-containers-config-version: "6200710d-bb6e-4b46-89ac-0f5d87a1e893"
    network-plugin: aci-containers
  name: aci-containers:host-agent
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - pods
  - endpoints
  - services
  verbs:
  - list
  - watch
  - get
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: aci-containers:controller
  labels:
    aci-containers-config-version: "6200710d-bb6e-4b46-89ac-0f5d87a1e893"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: aci-containers:controller
subjects:
- kind: ServiceAccount
  name: aci-containers-controller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: aci-containers:host-agent
  labels:
    aci-containers-config-version: "6200710d-bb6e-4b46-89ac-0f5d87a1e893"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: aci-containers:host-agent
subjects:
- kind: ServiceAccount
  name: aci-containers-host-agent
  namespace: kube-system
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: aci-containers-host
  namespace: kube-system
  labels:
    aci-containers-config-version: "6200710d-bb6e-4b46-89ac-0f5d87a1e893"
    network-plugin: aci-containers
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      name: aci-containers-host
      network-plugin: aci-containers
  template:
    metadata:
      labels:
        name: aci-containers-host
        network-plugin: aci-containers
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      hostNetwork: true
      hostPID: true
      hostIPC: true
      serviceAccountName: aci-containers-host-agent
      tolerations:
        - key: CriticalAddonsOnly
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
      containers:
        - name: aci-containers-host
          image: noiro/aci-containers-host:1.7r86
          imagePullPolicy: Always
          securityContext:
            capabilities:
              add:
                - SYS_ADMIN
                - NET_ADMIN
          env:
            - name: KUBERNETES_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: cni-bin
              mountPath: /mnt/cni-bin
            - name: cni-conf
              mountPath: /mnt/cni-conf
            - name: hostvar
              mountPath: /usr/local/var
            - name: hostrun
              mountPath: /run
            - name: hostrun
              mountPath: /usr/local/run
            - name: opflex-hostconfig-volume
              mountPath: /usr/local/etc/opflex-agent-ovs/base-conf.d
            - name: host-config-volume
              mountPath: /usr/local/etc/aci-containers/
          livenessProbe:
            httpGet:
              path: /status
              port: 8090
        - name: opflex-agent
          image: noiro/opflex:1.7r70
          imagePullPolicy: Always
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
          volumeMounts:
            - name: hostvar
              mountPath: /usr/local/var
            - name: hostrun
              mountPath: /run
            - name: hostrun
              mountPath: /usr/local/run
            - name: opflex-hostconfig-volume
              mountPath: /usr/local/etc/opflex-agent-ovs/base-conf.d
            - name: opflex-config-volume
              mountPath: /usr/local/etc/opflex-agent-ovs/conf.d
        - name: mcast-daemon
          image: noiro/opflex:1.7r70
          command: ["/bin/sh"]
          args: ["/usr/local/bin/launch-mcastdaemon.sh"]
          imagePullPolicy: Always
          volumeMounts:
            - name: hostvar
              mountPath: /usr/local/var
            - name: hostrun
              mountPath: /run
            - name: hostrun
              mountPath: /usr/local/run
      restartPolicy: Always
      volumes:
        - name: cni-bin
          hostPath:
            path: /opt
        - name: cni-conf
          hostPath:
            path: /etc
        - name: hostvar
          hostPath:
            path: /var
        - name: hostrun
          hostPath:
            path: /run
        - name: host-config-volume
          configMap:
            name: aci-containers-config
            items:
              - key: host-agent-config
                path: host-agent.conf
        - name: opflex-hostconfig-volume
          emptyDir:
            medium: Memory
        - name: opflex-config-volume
          configMap:
            name: aci-containers-config
            items:
              - key: opflex-agent-config
                path: local.conf
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: aci-containers-openvswitch
  namespace: kube-system
  labels:
    aci-containers-config-version: "6200710d-bb6e-4b46-89ac-0f5d87a1e893"
    network-plugin: aci-containers
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      name: aci-containers-openvswitch
      network-plugin: aci-containers
  template:
    metadata:
      labels:
        name: aci-containers-openvswitch
        network-plugin: aci-containers
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      hostNetwork: true
      hostPID: true
      hostIPC: true
      serviceAccountName: aci-containers-host-agent
      tolerations:
        - key: CriticalAddonsOnly
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
      containers:
        - name: aci-containers-openvswitch
          image: noiro/openvswitch:1.7r24
          imagePullPolicy: Always
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
                - SYS_MODULE
                - SYS_NICE
                - IPC_LOCK
          env:
            - name: OVS_RUNDIR
              value: /usr/local/var/run/openvswitch
          volumeMounts:
            - name: hostvar
              mountPath: /usr/local/var
            - name: hostrun
              mountPath: /run
            - name: hostrun
              mountPath: /usr/local/run
            - name: hostetc
              mountPath: /usr/local/etc
            - name: hostmodules
              mountPath: /lib/modules
          livenessProbe:
            exec:
              command:
                - /usr/local/bin/liveness-ovs.sh
      restartPolicy: Always
      volumes:
        - name: hostetc
          hostPath:
            path: /etc
        - name: hostvar
          hostPath:
            path: /var
        - name: hostrun
          hostPath:
            path: /run
        - name: hostmodules
          hostPath:
            path: /lib/modules
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: aci-containers-controller
  namespace: kube-system
  labels:
    aci-containers-config-version: "6200710d-bb6e-4b46-89ac-0f5d87a1e893"
    network-plugin: aci-containers
    name: aci-containers-controller
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      name: aci-containers-controller
      network-plugin: aci-containers
  template:
    metadata:
      name: aci-containers-controller
      namespace: kube-system
      labels:
        name: aci-containers-controller
        network-plugin: aci-containers
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      hostNetwork: true
      serviceAccountName: aci-containers-controller
      tolerations:
        - key: CriticalAddonsOnly
      containers:
        - name: aci-containers-controller
          image: noiro/aci-containers-controller:1.7r86
          imagePullPolicy: Always
          volumeMounts:
            - name: controller-config-volume
              mountPath: /usr/local/etc/aci-containers/
            - name: aci-user-cert-volume
              mountPath: /usr/local/etc/aci-cert/
          livenessProbe:
            httpGet:
              path: /status
              port: 8091
      volumes:
        - name: aci-user-cert-volume
          secret:
            secretName: aci-user-cert
        - name: controller-config-volume
          configMap:
            name: aci-containers-config
            items:
              - key: controller-config
                path: controller.conf
