apiVersion: v1
kind: ConfigMap
metadata:
  name: aci-containers-config
  namespace: kube-system
  labels:
    aci-containers-config-version: "5cc670b1-2da5-4f4c-8cce-52f052205da6"
    network-plugin: aci-containers
data:
  controller-config: |-
    {
        "log-level": "info",
        "apic-hosts": [
            "10.10.20.12"
        ],
        "apic-username": "kubesbx40",
        "apic-private-key-path": "/usr/local/etc/aci-cert/user.key",
        "aci-prefix": "kubesbx40",
        "aci-vmm-type": "Kubernetes",
        "aci-vmm-domain": "kubesbx40",
        "aci-vmm-controller": "kubesbx40",
        "aci-policy-tenant": "kubesbx40",
        "require-netpol-annot": false,
        "aci-service-phys-dom": "kubesbx40-pdom",
        "aci-service-encap": "vlan-983",
        "aci-service-monitor-interval": 15,
        "aci-vrf-tenant": "common",
        "aci-l3out": "sbx_shared_L3Out",
        "aci-ext-networks": [
            "any_ip"
        ],
        "aci-vrf": "sbx_shared",
        "default-endpoint-group": {
            "policy-space": "kubesbx40",
            "name": "kubernetes|kube-default"
        },
        "namespace-default-endpoint-group": {
            "kube-system": {
                "policy-space": "kubesbx40",
                "name": "kubernetes|kube-system"
            }
        },
        "service-ip-pool": [
            {
                "start": "172.20.40.194", 
                "end": "172.20.40.222"
            }
        ],
        "static-service-ip-pool": [
            {
                "start": "172.20.40.226", 
                "end": "172.20.40.254"
            }
        ],
        "pod-ip-pool": [
            {
                "start": "10.240.0.2", 
                "end": "10.240.255.254"
            }
        ],
        "node-service-ip-pool": [
            {
                "start": "192.168.140.2", 
                "end": "192.168.140.254"
            }
        ],
        "node-service-subnets": [
            "192.168.140.1/24"
        ]
    }
  host-agent-config: |-
    {
        "log-level": "info",
        "aci-vmm-type": "Kubernetes",
        "aci-vmm-domain": "kubesbx40",
        "aci-vmm-controller": "kubesbx40",
        "aci-vrf": "sbx_shared",
        "aci-vrf-tenant": "common",
        "service-vlan": 983,
        "encap-type": "vxlan",
        "aci-infra-vlan": 4093,
        "cni-netconfig": [
            {
                "routes": [
                    {
                        "gw": "10.240.0.1", 
                        "dst": "0.0.0.0/0"
                    }
                ], 
                "subnet": "10.240.0.0/16", 
                "gateway": "10.240.0.1"
            }
        ]
    }
  opflex-agent-config: |-
    {
        "log": {
            "level": "info"
        },
        "opflex": {
        }
    }
---
apiVersion: v1
kind: Secret
metadata:
  name: aci-user-cert
  namespace: kube-system
  labels:
    aci-containers-config-version: "5cc670b1-2da5-4f4c-8cce-52f052205da6"
data:
  user.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUNlQUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQW1Jd2dnSmVBZ0VBQW9HQkFNeElVMUlLUXE1cXU1aDUKYlgzMWh6NHN4YUZqMitWVHVZWnIyZkFMTU9tcnBNd2F1aWVJaFVHbW5pYXVJWUQwUUVFK2pad1lGOEZoK29wbQpzUml0Rmo0S1E5UStIZ2piVDk0SHhqZjZWMzBEUnMyNGpKUjNjM0VRbVlPSG5jeVRPS21wTmgxMlBQQXJZNGJ2Ck8rekg5MENhTkNOcmV6UUtILy9uS1BsOFUxVWZBZ01CQUFFQ2dZRUF2NEpDVWxQNkpVYzhMUG9STXBkK1BVUjkKMWdvbXVQdmZubXYzZVRrVWxzdHFDRW82SUJ1MVNWR3BTL3ZNdnZhOFVpNFJWYmVrZFkrajhDSExmcVd0aGJjTwpQNTMza0JsL3dnUW15QzRPYk1DbHFEa1NOM3lieWsyVTFneER2TEtKOFdEclAyRDBnZjNFUlRwRXlqUjhCandQCjBSL1c1RXlNazAweFNlSm1SYkVDUVFEOENESW5sdmpmNWw2R2FFMjEveFNQeWQxTHN1ZERaa256Yk5XSTZqYkwKNnI0ZnowMFVPMk9sNlJNZzlNSm5EaUFBYXYwVzYrdUpCVzRlRCtTbjNMdFhBa0VBejMrdFl5VU9iNXN6YmZKUQo3b3VzRVk5TFRwWGhxTGtUcUc0dG1MbktISSs1eEFJZnBWSHpVRWZSZDdGejZvWkJqaGtMekVoTVU5bHl2WHVhCmZlTGZlUUpCQU91LzR1SmpkeU5CQXhSb3hxQkNIWUt1eWNEQWRWRDNncDhnSTlIeGZCWmMyMEU0RVJxbXZ2eDMKdTd2dEYxZDh2L1NFSDMvc2FLTUFJRlFnZTd1Rlh2c0NRUUNCTG1yaTI3SW1GNGlvUFlEWFVrdDR6eTVDS1p2SQpzQmlsOXBvYWlDaGxLYkdzYnVvR3dZTnFpcHZGR2N3aHlSM00rcGpXd0hnTWg4Y2dZbkJuU1RSNUFrQVlsVm1OCmVUdTdTWW00bzlJVk42YzFqQmo2UFVzNHRINkdkMXZybFVEQjVrZldsdFpXQ3EzTCtiSzgwZW9Pc3VLVWFMV28Ka0YwLzZFVkM0RzRkb2lhdgotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCg==
  user.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI3RENDQVZVQ0FnUG9NQTBHQ1NxR1NJYjNEUUVCQlFVQU1ENHhDekFKQmdOVkJBWVRBbFZUTVJZd0ZBWUQKVlFRS0RBMURhWE5qYnlCVGVYTjBaVzF6TVJjd0ZRWURWUVFEREE1VmMyVnlJR3QxWW1WelluZzBNREFlRncweApPREE0TURrd05UVTFNemxhRncweU9EQTRNRFl4TnpVMU16bGFNRDR4Q3pBSkJnTlZCQVlUQWxWVE1SWXdGQVlEClZRUUtEQTFEYVhOamJ5QlRlWE4wWlcxek1SY3dGUVlEVlFRRERBNVZjMlZ5SUd0MVltVnpZbmcwTURDQm56QU4KQmdrcWhraUc5dzBCQVFFRkFBT0JqUUF3Z1lrQ2dZRUF6RWhUVWdwQ3JtcTdtSGx0ZmZXSFBpekZvV1BiNVZPNQpobXZaOEFzdzZhdWt6QnE2SjRpRlFhYWVKcTRoZ1BSQVFUNk5uQmdYd1dINmltYXhHSzBXUGdwRDFENGVDTnRQCjNnZkdOL3BYZlFOR3piaU1sSGR6Y1JDWmc0ZWR6Sk00cWFrMkhYWTg4Q3RqaHU4NzdNZjNRSm8wSTJ0N05Bb2YKLytjbytYeFRWUjhDQXdFQUFUQU5CZ2txaGtpRzl3MEJBUVVGQUFPQmdRQlZwREk2OGpKdzkrMWlIVVNUM3RlZwpCbTBXTXorUS8zOEg1bzV3cXhPSG1lNUJFNmZ5NXZxNHJnKzFyb08zam0yd3l5bzlvcG5QOG11MmtUank3K1ZuCmhwMVhVdE1XeC9FVVNzSS9DVXEydlJ0UGVXOFhySkk0WXFrMFBVTTYrS2RQRTJNNmN0LzI3Nk9JbDFwNlFkZXgKTFVVek90dEc3amJnUHVzejRqQStYUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aci-containers-controller
  namespace: kube-system
  labels:
    aci-containers-config-version: "5cc670b1-2da5-4f4c-8cce-52f052205da6"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aci-containers-host-agent
  namespace: kube-system
  labels:
    aci-containers-config-version: "5cc670b1-2da5-4f4c-8cce-52f052205da6"
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    aci-containers-config-version: "5cc670b1-2da5-4f4c-8cce-52f052205da6"
    network-plugin: aci-containers
  name: aci-containers:controller
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - namespaces
  - pods
  - endpoints
  - services
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - "networking.k8s.io"
  resources:
  - networkpolicies
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - "extensions"
  resources:
  - deployments
  - replicasets
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - ""
  resources:
  - pods
  - nodes
  - services/status
  verbs:
  - update
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    aci-containers-config-version: "5cc670b1-2da5-4f4c-8cce-52f052205da6"
    network-plugin: aci-containers
  name: aci-containers:host-agent
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - pods
  - endpoints
  - services
  verbs:
  - list
  - watch
  - get
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: aci-containers:controller
  labels:
    aci-containers-config-version: "5cc670b1-2da5-4f4c-8cce-52f052205da6"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: aci-containers:controller
subjects:
- kind: ServiceAccount
  name: aci-containers-controller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: aci-containers:host-agent
  labels:
    aci-containers-config-version: "5cc670b1-2da5-4f4c-8cce-52f052205da6"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: aci-containers:host-agent
subjects:
- kind: ServiceAccount
  name: aci-containers-host-agent
  namespace: kube-system
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: aci-containers-host
  namespace: kube-system
  labels:
    aci-containers-config-version: "5cc670b1-2da5-4f4c-8cce-52f052205da6"
    network-plugin: aci-containers
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      name: aci-containers-host
      network-plugin: aci-containers
  template:
    metadata:
      labels:
        name: aci-containers-host
        network-plugin: aci-containers
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      hostNetwork: true
      hostPID: true
      hostIPC: true
      serviceAccountName: aci-containers-host-agent
      tolerations:
        - key: CriticalAddonsOnly
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
      containers:
        - name: aci-containers-host
          image: noiro/aci-containers-host:1.7r86
          imagePullPolicy: Always
          securityContext:
            capabilities:
              add:
                - SYS_ADMIN
                - NET_ADMIN
          env:
            - name: KUBERNETES_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: cni-bin
              mountPath: /mnt/cni-bin
            - name: cni-conf
              mountPath: /mnt/cni-conf
            - name: hostvar
              mountPath: /usr/local/var
            - name: hostrun
              mountPath: /run
            - name: hostrun
              mountPath: /usr/local/run
            - name: opflex-hostconfig-volume
              mountPath: /usr/local/etc/opflex-agent-ovs/base-conf.d
            - name: host-config-volume
              mountPath: /usr/local/etc/aci-containers/
          livenessProbe:
            httpGet:
              path: /status
              port: 8090
        - name: opflex-agent
          image: noiro/opflex:1.7r70
          imagePullPolicy: Always
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
          volumeMounts:
            - name: hostvar
              mountPath: /usr/local/var
            - name: hostrun
              mountPath: /run
            - name: hostrun
              mountPath: /usr/local/run
            - name: opflex-hostconfig-volume
              mountPath: /usr/local/etc/opflex-agent-ovs/base-conf.d
            - name: opflex-config-volume
              mountPath: /usr/local/etc/opflex-agent-ovs/conf.d
        - name: mcast-daemon
          image: noiro/opflex:1.7r70
          command: ["/bin/sh"]
          args: ["/usr/local/bin/launch-mcastdaemon.sh"]
          imagePullPolicy: Always
          volumeMounts:
            - name: hostvar
              mountPath: /usr/local/var
            - name: hostrun
              mountPath: /run
            - name: hostrun
              mountPath: /usr/local/run
      restartPolicy: Always
      volumes:
        - name: cni-bin
          hostPath:
            path: /opt
        - name: cni-conf
          hostPath:
            path: /etc
        - name: hostvar
          hostPath:
            path: /var
        - name: hostrun
          hostPath:
            path: /run
        - name: host-config-volume
          configMap:
            name: aci-containers-config
            items:
              - key: host-agent-config
                path: host-agent.conf
        - name: opflex-hostconfig-volume
          emptyDir:
            medium: Memory
        - name: opflex-config-volume
          configMap:
            name: aci-containers-config
            items:
              - key: opflex-agent-config
                path: local.conf
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: aci-containers-openvswitch
  namespace: kube-system
  labels:
    aci-containers-config-version: "5cc670b1-2da5-4f4c-8cce-52f052205da6"
    network-plugin: aci-containers
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      name: aci-containers-openvswitch
      network-plugin: aci-containers
  template:
    metadata:
      labels:
        name: aci-containers-openvswitch
        network-plugin: aci-containers
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      hostNetwork: true
      hostPID: true
      hostIPC: true
      serviceAccountName: aci-containers-host-agent
      tolerations:
        - key: CriticalAddonsOnly
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
      containers:
        - name: aci-containers-openvswitch
          image: noiro/openvswitch:1.7r24
          imagePullPolicy: Always
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
                - SYS_MODULE
                - SYS_NICE
                - IPC_LOCK
          env:
            - name: OVS_RUNDIR
              value: /usr/local/var/run/openvswitch
          volumeMounts:
            - name: hostvar
              mountPath: /usr/local/var
            - name: hostrun
              mountPath: /run
            - name: hostrun
              mountPath: /usr/local/run
            - name: hostetc
              mountPath: /usr/local/etc
            - name: hostmodules
              mountPath: /lib/modules
          livenessProbe:
            exec:
              command:
                - /usr/local/bin/liveness-ovs.sh
      restartPolicy: Always
      volumes:
        - name: hostetc
          hostPath:
            path: /etc
        - name: hostvar
          hostPath:
            path: /var
        - name: hostrun
          hostPath:
            path: /run
        - name: hostmodules
          hostPath:
            path: /lib/modules
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: aci-containers-controller
  namespace: kube-system
  labels:
    aci-containers-config-version: "5cc670b1-2da5-4f4c-8cce-52f052205da6"
    network-plugin: aci-containers
    name: aci-containers-controller
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      name: aci-containers-controller
      network-plugin: aci-containers
  template:
    metadata:
      name: aci-containers-controller
      namespace: kube-system
      labels:
        name: aci-containers-controller
        network-plugin: aci-containers
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      hostNetwork: true
      serviceAccountName: aci-containers-controller
      tolerations:
        - key: CriticalAddonsOnly
      containers:
        - name: aci-containers-controller
          image: noiro/aci-containers-controller:1.7r86
          imagePullPolicy: Always
          volumeMounts:
            - name: controller-config-volume
              mountPath: /usr/local/etc/aci-containers/
            - name: aci-user-cert-volume
              mountPath: /usr/local/etc/aci-cert/
          livenessProbe:
            httpGet:
              path: /status
              port: 8091
      volumes:
        - name: aci-user-cert-volume
          secret:
            secretName: aci-user-cert
        - name: controller-config-volume
          configMap:
            name: aci-containers-config
            items:
              - key: controller-config
                path: controller.conf
